package view;

import controller.DetailTransactionController;
import controller.ItemController;
import controller.TransactionController;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Cashier;
import model.Detail_Transaction;
import model.Item;

/**
 *
 * @author Evan Henderson
 */
public class TransactionAdd extends javax.swing.JFrame {

    static Cashier loggedEmployee;
    static final String[] cartHeaders = {
        "Title", "Category", "Price", "Quantity"
    };

    static ArrayList<Detail_Transaction> cartSourceData = new ArrayList<>();
    static DefaultTableModel cartModel = new DefaultTableModel(cartHeaders, 0);

    /**
     * Creates new form TransactionAdd
     */
    public TransactionAdd() throws SQLException {
        initComponents();
        String[] itemHeaders = {
            "id_item", "id_category", "Title", "Description", "Price", "In Stock", "Category"
        };
        DefaultTableModel itemModel = new DefaultTableModel(itemHeaders, 0);
        itemTable.setModel(itemModel);
        ArrayList<Item> sourceData = ItemController.get();
        for (Item item : sourceData) {
            String[] rowData = {
                Integer.toString(item.getId_item()),
                Integer.toString(item.getId_category()),
                item.getTitle(),
                item.getDescription(),
                Float.toString(item.getPrice()),
                Integer.toString(item.getIn_stock()),
                item.getCategory()
            };
            itemModel.addRow(rowData);
        }

        cartTable.setModel(cartModel);
    }

    public TransactionAdd(Cashier loggedEmployee) throws SQLException {
        this();
        this.loggedEmployee = loggedEmployee;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customer_name = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        quantity = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        back = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        customer_name.setText("Anonymous");
        customer_name.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customer_nameMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(itemTable);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Quantity");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Customer Name");

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        submit.setText("Submit Transaction");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cartTable);

        jLabel3.setText("Total : $");

        total.setText("TotalValue");

        jMenu1.setText("File");

        back.setText("Back");
        jMenu1.add(back);

        logout.setText("Logout");
        jMenu1.add(logout);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total)
                                .addGap(18, 18, 18)
                                .addComponent(submit)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add)
                    .addComponent(submit)
                    .addComponent(jLabel3)
                    .addComponent(total))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        int[] selectedRows = itemTable.getSelectedRows();
        int id_transaction = 1;
        try {
            id_transaction += TransactionController.getLastTransactionId();
        } catch (SQLException e) {
            System.out.println(e);
        }
        try {
            ArrayList<Item> sourceData = ItemController.get();
            for (int selectedRow : selectedRows) {
                System.out.println(selectedRow);
                int id_item = sourceData.get(selectedRow).getId_item();
                String title = sourceData.get(selectedRow).getTitle();
                String category = sourceData.get(selectedRow).getCategory();
                float price = sourceData.get(selectedRow).getPrice();
                int quantity = Integer.parseInt(this.quantity.getValue().toString());
                float subtotal = price * quantity;
//                System.out.println("Id_item: " + id_item);
//                System.out.println("Id_transaction: " + id_transaction);
//                System.out.println("Customer Name: " + customer_name);
//                System.out.println("Title: " + title);
//                System.out.println("Category: " + category);
//                System.out.println("Price: " + price);
//                System.out.println("Quantity: " + quantity);
                if (quantity > 0) {
                    cartSourceData.add(new Detail_Transaction(id_transaction, id_item, quantity, price, subtotal, title, category));
                }
            }
            while (cartModel.getRowCount() > 0) {
                cartModel.removeRow(0);
            }
            for (Detail_Transaction detail_Transaction : cartSourceData) {
                String[] rowData = {
                    detail_Transaction.getCartItemTitle(),
                    detail_Transaction.getCartCategory(),
                    Float.toString(detail_Transaction.getCartItemPrice()),
                    Integer.toString(detail_Transaction.getCartQuantity())
                };
                cartModel.addRow(rowData);
            }
            float total = 0;
            for (Detail_Transaction detail_Transaction : cartSourceData) {
                total += detail_Transaction.getCartSubtotal();
            }
            this.total.setText(Float.toString(total));
        } catch (SQLException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_addActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        float total = 0;
        String customerName = customer_name.getText();
        int idEmployee = loggedEmployee.getId_employee();

        for (Detail_Transaction detail_Transaction : cartSourceData) {
            total += detail_Transaction.getCartSubtotal();
        }
//        System.out.println("Customer Name: " + customerName);
//        System.out.println("Total: " + total);
//        System.out.println("ID Employee: " + idEmployee);

//        for (Detail_Transaction c : cartSourceData) {
//            System.out.println();
//            System.out.println(c.getCartIdItem());
//            System.out.println(c.getCartQuantity());
//            System.out.println(c.getCartSubtotal());
//        }

        try {
            int idTransaction = TransactionController.getLastTransactionId() + 1;
            TransactionController.add(idTransaction, idEmployee, customerName, total);
            for (Detail_Transaction dt : cartSourceData) {
                try {
                    DetailTransactionController.add(idTransaction, dt.getCartIdItem(), dt.getCartQuantity(), dt.getCartSubtotal());
                } catch (SQLException ex) {
                    Logger.getLogger(TransactionAdd.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.dispose();
            new Transactions(loggedEmployee).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(TransactionAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
//        try {
//            TransactionController.add(idEmployee, customerName, total);
//            for (Detail_Transaction dt : cartSourceData) {
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(TransactionAdd.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
    }//GEN-LAST:event_submitActionPerformed

    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        int index = cartTable.getSelectedRow();
        System.out.println("Selected: " + index);
        cartSourceData.remove(index);
        while (cartModel.getRowCount() > 0) {
            cartModel.removeRow(0);
        }
        for (Detail_Transaction detail_Transaction : cartSourceData) {
            String[] rowData = {
                detail_Transaction.getCartItemTitle(),
                detail_Transaction.getCartCategory(),
                Float.toString(detail_Transaction.getCartItemPrice()),
                Integer.toString(detail_Transaction.getCartQuantity())
            };
            cartModel.addRow(rowData);
        }
        float total = 0;
        for (Detail_Transaction detail_Transaction : cartSourceData) {
            total += detail_Transaction.getCartSubtotal();
        }
        this.total.setText(Float.toString(total));
    }//GEN-LAST:event_cartTableMouseClicked

    private void customer_nameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customer_nameMouseClicked
        customer_name.setText("");
    }//GEN-LAST:event_customer_nameMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TransactionAdd().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(TransactionAdd.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JMenuItem back;
    private javax.swing.JTable cartTable;
    private javax.swing.JTextField customer_name;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem logout;
    private javax.swing.JSpinner quantity;
    private javax.swing.JButton submit;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
}
