/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ItemController;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Cashier;
import model.Item;
import view.components.Popup;

/**
 *
 * @author Evan Henderson
 */
public class Items extends javax.swing.JFrame {

    static Cashier loggedEmployee;

    static String[] headers = {
        "ID Item", "Title", "Category", "Description", "Price", "In Stock", "In Transaction"
    };

    static DefaultTableModel model = new DefaultTableModel(headers, 0);
    static ArrayList<Item> sourceData;

    /**
     * Creates new form Items
     */
    public Items(Cashier employee) {
        this();
        this.loggedEmployee = employee;
    }

    public Items() {
        try {
            initComponents();
            itemTable.setModel(model);
            sourceData = ItemController.getWithConstraint();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            for (Item c : sourceData) {
                String[] rowData = {
                    Integer.toString(c.getId_item()),
                    c.getTitle(),
                    c.getCategory(),
                    c.getDescription(),
                    Float.toString(c.getPrice()),
                    Integer.toString(c.getIn_stock()),
                    Integer.toString(c.getIn_transaction())
                };
                model.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        create = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        transactionTable = new javax.swing.JMenuItem();
        categoryTable = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Items");

        jScrollPane1.setViewportView(itemTable);

        create.setText("New Item");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        delete.setText("Delete Item");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        update.setText("Update Item");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        transactionTable.setText("Transaction Table");
        transactionTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionTableActionPerformed(evt);
            }
        });
        jMenu1.add(transactionTable);

        categoryTable.setText("Category Table");
        categoryTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryTableActionPerformed(evt);
            }
        });
        jMenu1.add(categoryTable);

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu1.add(logout);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(create)
                        .addGap(18, 18, 18)
                        .addComponent(update)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create)
                    .addComponent(delete)
                    .addComponent(update))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRow = itemTable.getSelectedRow();

        Item selectedItem = sourceData.get(selectedRow);
        if (selectedItem.getIn_transaction() > 0) {
            Popup p = new Popup("Integrity Constraint Warning", "This item has interconnected transaction");
            p.setVisible(true);
        } else {
            try {
                ItemController.delete(selectedItem.getId_item());
                sourceData = ItemController.getWithConstraint();
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }
                for (Item c : sourceData) {
                    String[] rowData = {
                        Integer.toString(c.getId_item()),
                        c.getTitle(),
                        c.getCategory(),
                        c.getDescription(),
                        Float.toString(c.getPrice()),
                        Integer.toString(c.getIn_stock()),
                        Integer.toString(c.getIn_transaction())
                    };
                    model.addRow(rowData);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void transactionTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionTableActionPerformed
        try {
            this.dispose();
            Transactions transactionTable = new Transactions(loggedEmployee);
            transactionTable.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_transactionTableActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    private void categoryTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryTableActionPerformed
        this.dispose();
        Categories ct = new Categories(loggedEmployee);
        ct.setVisible(true);
    }//GEN-LAST:event_categoryTableActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        try {
            ItemAdd ia = new ItemAdd(this, true);
            ia.setVisible(true);
            sourceData = ItemController.getWithConstraint();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            for (Item c : sourceData) {
                String[] rowData = {
                    Integer.toString(c.getId_item()),
                    c.getTitle(),
                    c.getCategory(),
                    c.getDescription(),
                    Float.toString(c.getPrice()),
                    Integer.toString(c.getIn_stock()),
                    Integer.toString(c.getIn_transaction())
                };
                model.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try {
            int selectedRow = itemTable.getSelectedRow();
            Item selectedItem = sourceData.get(selectedRow);
            int selectedId = selectedItem.getId_item();
            String selectedCategory = selectedItem.getCategory();
            ItemUpdate iu = new ItemUpdate(this, true, selectedCategory, selectedId);
            iu.title.setText(selectedItem.getTitle());
            iu.description.setText(selectedItem.getDescription());
            iu.price.setValue(selectedItem.getPrice());
            iu.stock.setValue(selectedItem.getIn_stock());
            iu.setVisible(true);
            
            sourceData = ItemController.getWithConstraint();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            for (Item c : sourceData) {
                String[] rowData = {
                    Integer.toString(c.getId_item()),
                    c.getTitle(),
                    c.getCategory(),
                    c.getDescription(),
                    Float.toString(c.getPrice()),
                    Integer.toString(c.getIn_stock()),
                    Integer.toString(c.getIn_transaction())
                };
                model.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Items().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem categoryTable;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JTable itemTable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem logout;
    private javax.swing.JMenuItem transactionTable;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
